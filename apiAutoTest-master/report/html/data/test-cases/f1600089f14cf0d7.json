{
  "uid" : "f1600089f14cf0d7",
  "name" : "get请求查询用户数据列表",
  "fullName" : "test.test_api#test_main",
  "historyId" : "f9a3a528aa08d345b131e068670a2332",
  "time" : {
    "start" : 1611727380199,
    "stop" : 1611727380256,
    "duration" : 57
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 断言失败 -|- 实际结果:{'msg': '无效token', 'status': 400} || 预期结果: {'msg': '获取管理员列表成功', 'status': 200}",
  "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools\\data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:{'msg': '无效token', 'status': 400} || 预期结果: {'msg': '获取管理员列表成功', 'status': 200}\n\ntools\\data_process.py:120: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1611727380198,
      "stop" : 1611727380198,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 断言失败 -|- 实际结果:{'msg': '无效token', 'status': 400} || 预期结果: {'msg': '获取管理员列表成功', 'status': 200}",
    "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools\\data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:{'msg': '无效token', 'status': 400} || 预期结果: {'msg': '获取管理员列表成功', 'status': 200}\n\ntools\\data_process.py:120: AssertionError",
    "steps" : [ {
      "name" : "请求地址",
      "time" : {
        "start" : 1611727380199,
        "stop" : 1611727380199,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "8a4c25a0bf7cdb8c",
        "name" : "请求地址",
        "source" : "8a4c25a0bf7cdb8c.txt",
        "type" : "text/plain",
        "size" : 49
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1611727380199,
        "stop" : 1611727380200,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d4f66a3e015ef7dd",
        "name" : "请求头",
        "source" : "d4f66a3e015ef7dd.txt",
        "type" : "text/plain",
        "size" : 220
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "请求参数",
      "time" : {
        "start" : 1611727380201,
        "stop" : 1611727380202,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5c4534caa3c9eda3",
        "name" : "请求参数",
        "source" : "5c4534caa3c9eda3.txt",
        "type" : "text/plain",
        "size" : 59
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "上传文件",
      "time" : {
        "start" : 1611727380202,
        "stop" : 1611727380203,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "dd238a4768c2b559",
        "name" : "上传文件",
        "source" : "dd238a4768c2b559.txt",
        "type" : "text/plain",
        "size" : 2
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "响应耗时(s)",
      "time" : {
        "start" : 1611727380250,
        "stop" : 1611727380250,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "fc916ac7986978ec",
        "name" : "响应耗时(s)",
        "source" : "fc916ac7986978ec.txt",
        "type" : "text/plain",
        "size" : 8
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "响应内容",
      "time" : {
        "start" : 1611727380250,
        "stop" : 1611727380251,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "bc6f926bc0afc612",
        "name" : "响应内容",
        "source" : "bc6f926bc0afc612.txt",
        "type" : "text/plain",
        "size" : 93
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "存储实际响应",
      "time" : {
        "start" : 1611727380252,
        "stop" : 1611727380253,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "10ce9bb6b39a5491",
        "name" : "存储实际响应",
        "source" : "10ce9bb6b39a5491.txt",
        "type" : "text/plain",
        "size" : 2641
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "第1个断言",
      "time" : {
        "start" : 1611727380254,
        "stop" : 1611727380255,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "36487af2d71ab1ac",
        "name" : "第1个断言",
        "source" : "36487af2d71ab1ac.txt",
        "type" : "text/plain",
        "size" : 121
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "156b0fdabe6cd025",
      "name" : "stderr",
      "source" : "156b0fdabe6cd025.txt",
      "type" : "text/plain",
      "size" : 1291
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 8
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "LAPTOP-FR8LEA9G"
  }, {
    "name" : "thread",
    "value" : "5708-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', '', '{\"pagenum\": 1, \"pagesize\": \"12\", \"msg\": &$.msg&}', '', '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "f1600089f14cf0d7.json",
  "parameterValues" : [ "['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', '', '{\"pagenum\": 1, \"pagesize\": \"12\", \"msg\": &$.msg&}', '', '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}']" ]
}