{"name": "本地添加用户，测试数据库备份", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败 -|- 实际结果:None || 预期结果: 成功", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.msg\": \"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools\\data_process.py:118: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_013', '本地添加用户，测试数据库备份', 'users/', '', 'post', 'data', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.msg\": \"成功\"}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(f'断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 断言失败 -|- 实际结果:None || 预期结果: 成功\n\ntools\\data_process.py:120: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "9b88b09e-f421-4a8d-baa9-adde8b6493d7-attachment.txt", "type": "text/plain"}], "start": 1611727380696, "stop": 1611727380697}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "f20ecd6c-a17b-4610-a9b9-33bcfb8cf219-attachment.txt", "type": "text/plain"}], "start": 1611727380697, "stop": 1611727380698}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "d9c53c1b-29d1-44e6-9851-f5c05816c210-attachment.txt", "type": "text/plain"}], "start": 1611727380698, "stop": 1611727380698}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "1600bb4f-30ab-4119-8bfa-cfe0d4ed4d0f-attachment.txt", "type": "text/plain"}], "start": 1611727380698, "stop": 1611727380699}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "f4bc0b35-156f-4cf7-b018-d0e7cecfdb4c-attachment.txt", "type": "text/plain"}], "start": 1611727380742, "stop": 1611727380744}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "e60d0032-8940-4a75-8d5a-ca94e34b785b-attachment.txt", "type": "text/plain"}], "start": 1611727380744, "stop": 1611727380745}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "d32cc01c-192d-419a-a072-22ba96fa57f8-attachment.txt", "type": "text/plain"}], "start": 1611727380746, "stop": 1611727380747}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "5b0b2892-8516-4e90-8532-77d2267fc368-attachment.txt", "type": "text/plain"}], "start": 1611727380748, "stop": 1611727380749}], "attachments": [{"name": "stderr", "source": "a5566200-b879-4eb9-a90c-1ba8dc174f92-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "cases", "value": "['case_013', '本地添加用户，测试数据库备份', 'users/', '', 'post', 'data', '', '', '', '{\"$.msg\": \"成功\"}']"}], "start": 1611727380696, "stop": 1611727380750, "uuid": "b3c14f39-ed6d-4d40-b073-dc6e87ae1719", "historyId": "5777368728cab34aec99bce292e15e60", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "LAPTOP-FR8LEA9G"}, {"name": "thread", "value": "5708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}